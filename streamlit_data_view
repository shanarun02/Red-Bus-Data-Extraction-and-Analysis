import streamlit as st
import pandas as pd
import pymysql

# Streamlit title
st.title("Red Bus Insights")

# SQL database connection
connection = pymysql.connect(
    host='localhost',
    user='root',
    password='Arun@5851',
    database='guvi'
)

# Query the data
query = "SELECT * FROM red_bus_details"
df = pd.read_sql(query, connection)

# Convert 'hh:mm' format duration into minutes
def convert_duration_to_minutes(duration):
    try:
        hours, minutes = 0, 0
        if 'h' in duration:
            hours = int(duration.split('h')[0].strip())
        if 'm' in duration:
            minutes = int(duration.split('m')[-2].split('h')[-1].strip())
        return hours * 60 + minutes
    except:
        return 0

# Apply duration conversion
df['Total Duration (Minutes)'] = df['Duration'].apply(convert_duration_to_minutes)

# Convert necessary columns to numeric
df['Bus_Spare'] = pd.to_numeric(df['Bus_Spare'], errors='coerce')
df['Total Duration (Minutes)'] = pd.to_numeric(df['Total Duration (Minutes)'], errors='coerce')
df['Bus_Rating'] = pd.to_numeric(df['Bus_Rating'], errors='coerce')
df = df.dropna(subset=['Bus_Spare', 'Total Duration (Minutes)', 'Bus_Rating'])

# Rename columns for convenience
df.rename(columns={
    'ROUTE_NAME': 'Route Name',
    'Bus_Spare': 'Price',
    'Bus_Rating': 'Rating'
}, inplace=True)

# Sidebar filters
st.sidebar.title("Filters")
app_mode = st.selectbox("Select View", ["Filtered Data"])

if app_mode == "Filtered Data":
    # Route filter
    route_options = df['Route Name'].unique()
    selected_route = st.sidebar.selectbox("Select Route", route_options)
    filtered_data = df[df['Route Name'] == selected_route]

    # Sort by duration
    st.sidebar.write("### Sort by Total Duration")
    duration_sort_order = st.sidebar.selectbox("Sort by Duration", ["Lowest to Highest", "Highest to Lowest"])
    filtered_data = filtered_data.sort_values(
        by='Total Duration (Minutes)', 
        ascending=(duration_sort_order == "Lowest to Highest")
    )

    # Sort by price
    st.sidebar.write("### Sort by Price")
    price_sort_order = st.sidebar.selectbox("Sort by Price", ["Lowest to Highest", "Highest to Lowest"])
    filtered_data = filtered_data.sort_values(
        by='Price', 
        ascending=(price_sort_order == "Lowest to Highest")
    )

    # Sort by rating
    st.sidebar.write("### Sort by Rating")
    rating_sort_order = st.sidebar.selectbox("Sort by Rating", ["Highest to Lowest", "Lowest to Highest"])
    filtered_data = filtered_data.sort_values(
        by='Rating',
        ascending=(rating_sort_order == "Lowest to Highest")
    )

    # Duration slider
    duration_min, duration_max = st.sidebar.slider(
        "Filter by Duration (Minutes)",
        int(df['Total Duration (Minutes)'].min()),
        int(df['Total Duration (Minutes)'].max()),
        (int(df['Total Duration (Minutes)'].min()), int(df['Total Duration (Minutes)'].max()))
    )
    filtered_data = filtered_data[
        (filtered_data['Total Duration (Minutes)'] >= duration_min) &
        (filtered_data['Total Duration (Minutes)'] <= duration_max)
    ]

    # Price slider
    price_min, price_max = st.sidebar.slider(
        "Filter by Price (â‚¹)",
        int(df['Price'].min()),
        int(df['Price'].max()),
        (int(df['Price'].min()), int(df['Price'].max()))
    )
    filtered_data = filtered_data[
        (filtered_data['Price'] >= price_min) &
        (filtered_data['Price'] <= price_max)
    ]

    # Rating slider
    rating_min, rating_max = st.sidebar.slider(
        "Filter by Rating",
        float(df['Rating'].min()), 
        float(df['Rating'].max()),
        (float(df['Rating'].min()), float(df['Rating'].max()))
    )
    filtered_data = filtered_data[
        (filtered_data['Rating'] >= rating_min) &
        (filtered_data['Rating'] <= rating_max)
    ]

    # Display final result
    st.write(f"### Filtered Results for Route: {selected_route}")
    st.dataframe(filtered_data)
